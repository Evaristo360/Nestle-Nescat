{
  "components.Guideline.CodeExamples.config01": "構成プロバイダー-コンポーネントで構成を使用する",
  "components.Guideline.CodeExamples.context01": "アプリケーションの言語とテーマのコンテキストの宣言",
  "components.Guideline.CodeExamples.mappers01": "オブジェクトを返すAPIの応答をマッピングします",
  "components.Guideline.CodeExamples.mappers02": "配列を返すAPIの応答をマッピングします",
  "components.Guideline.CodeExamples.messages01": "react-intl-defineMessages関数を使用してメッセージを定義します",
  "components.Guideline.CodeExamples.messages02": "react-intl-翻訳ファイルを自動的に生成します",
  "components.Guideline.CodeExamples.provider01": "アプリケーションテーマのプロバイダー",
  "components.Guideline.CodeExamples.provider02": "アプリケーション言語のプロバイダー",
  "components.Guideline.CodeExamples.provider03": "ルートコンポーネントでのアプリケーションプロバイダーの使用",
  "components.Guideline.CodeExamples.styles01": "マテリアルUI- @ material-ui / core / stylesを使用してスタイルクラスを作成します",
  "components.Guideline.CodeExamples.translations01": "react-intl-useIntlフックを使用してテキストをレンダリングします（常にこのオプションをお勧めします）",
  "components.Guideline.CodeExamples.translations02": "react-intl-FormattedMessageコンポーネントを使用してテキストをレンダリングします",
  "components.Guideline.CodeExamples.translations03": "react-intl-翻訳ファイルを自動的に生成します。",
  "components.Guideline.FileDistribution.api": "バックエンドサービスの定義が含まれ、 'request'フォルダーにHTTP動詞を含むエンドポイント定義を含める必要があり、 'mappers'フォルダーにサービスを提供するオブジェクトを含める必要がありますモックに従って応答を変換します。{br} {br}バックエンドによる応答の構造に変更があった場合、コンポーネントが継続するように変更する必要があるファイルはこれだけです。大きな問題なく機能します。 ",
  "components.Guideline.FileDistribution.assets": "このフォルダーには、アプリケーションの操作に直接干渉しない静的ファイルが含まれています。例:画像、アイコン、フォントなど。{br} {br}必須です。メインの.jsファイルを使用してこれらのリソースをインポートします。詳細については、Images.jsファイルを確認してください。 ",
  "components.Guideline.FileDistribution.components": "このフォルダーのコンテンツは、アプリケーションコンポーネントの作成専用です。コンポーネントのファイルは、コンポーネントと同じ名前のフォルダーに作成する必要があります。同じロジックの一部であるファイルには、プレフィックスとしてコンポーネントの名前が必要です。これにより、VSCodeでコンポーネントを検索するときにその場所がわかりやすくなります。 ",
  "components.Guideline.FileDistribution.config": "私たちのアプリケーションでは、実行時にロードおよびコンパイルされる.envファイルを介した構成を使用します。{br} {br}すべての構成をconfig / providerで処理する必要があります。 .jsを使用すると、特定の時点で、さまざまなソース（APIなど）から構成を取得して、デプロイを行わなくてもホットな変更を適用できるようになります。 ",
  "components.Guideline.FileDistribution.context": "接尾辞 'Context'が付いたJsxファイルには、React Contextの宣言のみが含まれます。これは、プロバイダーによって提供され、アプリケーションのどこからでもその値を変更します。",
  "components.Guideline.FileDistribution.hooks": "このフォルダーには、アプリケーションの任意のコンポーネントで使用できるフックが含まれています。フックを使用すると、コンポーネントから状態ロジックを抽出して、個別にテストおよび再利用できます。{br} {br}フックを使用すると、コンポーネントの階層を変更せずに状態ロジックを再利用できます。多くの場合、最初は単純ですが、時間の経過とともに成長し、複数のロジックの管理不能な混乱になるコンポーネントを維持する必要があります。ステータスと副作用。 ",
  "components.Guideline.FileDistribution.js": "index.jsファイルは、他のディレクトリからアクセスできるすべての要素をエクスポートすることを主な目的としています。これにより、各ファイルを指すインポートを回避し、よりクリーンでより多くの要素を実現します。フォルダ名だけを使用してアクセス可能なコード。 ",
  "components.Guideline.FileDistribution.jsx": "コンポーネントを従来の.jsと区別するために、jsx拡張子を使用してReactを使用するすべてのファイルに名前を付ける必要があります。",
  "components.Guideline.FileDistribution.layouts": "レイアウトは、アプリケーションのビューを分散するための一般的な構造です。たとえば、BaseLayoutにはヘッダーがあり、コンテンツはその下にレンダリングされますが、FullScreenLayoutにはヘッダーがありません。これにより、すべてのビューでコードを複製することなく、アプリケーションの主要な構造を再利用することができました。 ",
  "components.Guideline.FileDistribution.mappers": "マッパーは、モックに従ってテンプレートに基づいてAPIの応答を特定のデータ構造に変換するために使用されます。{br}マッパーを使用する主な利点は、APIの変更により私たちの開発に直接影響を与えることはありません。 ",
  "components.Guideline.FileDistribution.messages": "接尾辞「メッセージ」が付いたファイルは、react-intlを使用して翻訳されるコンポーネントテキストを定義することを主な目的としています。これらのファイルにそれらを含めることの利点は、次のことができるようにするのに役立ちます。複数の言語の翻訳を自動的に生成します。 ",
  "components.Guideline.FileDistribution.provider": "接尾辞 'Provider'が付いたJsxファイルにはメインのコンテキストプロバイダーが含まれ、コンテキストの値をさまざまなアプリケーションモジュールと共有するために使用されます。{br}原則として、これらのラッパーは主に小道具に「子」があり、アプリケーションのRoot.jsxにインポートされて使用されます。 ",
  "components.Guideline.FileDistribution.providers": "このフォルダーには、アプリケーションで一般的に使用されるリソースがあります。ある時点で別のソースから抽出するように切り替えることができる場合に備えて、リソースを一元化してオープンにすることを目的としています。 。{br} {br}現在のところ、一般的な構成、テーマ、およびAPIリソースがサポートされています。 ",
  "components.Guideline.FileDistribution.scss": "SASSファイルはカスタムスタイルシートの作成に使用できます。UXに必要なスタイルが非常に具体的で、マテリアルUIを使用して作成できない場合にのみ、SASSの使用が許可されます。常にマテリアルUIを使用してアプリケーションのテーマとスタイルを処理するため、これらを最後のオプションとして残すことを検討してください。 ",
  "components.Guideline.FileDistribution.sourceCodeLabel": "ソースコード",
  "components.Guideline.FileDistribution.src": "このフォルダーには、アプリケーションのソースコードが含まれています。",
  "components.Guideline.FileDistribution.styles": "接尾辞 'Styles'の付いたファイルは、マテリアルUIを使用してコンポーネントのスタイルを設定するオブジェクトを宣言するために使用されます。これらのファイルは 'useStyles'という単一の関数をエクスポートする必要があります。",
  "components.Guideline.FileDistribution.summary": "このセクションでは、アーキテクチャファイルの配布に関する簡単なガイドを紹介します。{br}以下に示すファイルエクスプローラーのほとんどの要素を、一部のファイルで操作できます。説明のために、参照用のコードを見つけることができます。 ",
  "components.Guideline.FileDistribution.theme": "マテリアルUIテーマのグローバル構成が含まれています。このプロバイダーでは、カラーパレット、フォントサイズ、ブレークポイントなどを構成できます。現在、アプリケーションはバリアントテーマDARKおよびLIGHT。 ",
  "components.Guideline.FileDistribution.title": "ファイル",
  "components.Guideline.FileDistribution.translations": "アプリケーションで使用され、react-intlによって解釈されたすべてのテキストの翻訳を含むjsonファイルが含まれています。デフォルトでは、言語「en」および「esmx」がサポートされています。 、ただし、必要な言語を追加できます。{br} {br}テキストはreact-intlを使用してコンポーネントにレンダリングする必要があり、メイン言語は「es-mx」です。 ",
  "components.Guideline.Introduction.aboutHooks": "フックはReact16.8に新しく追加されたものです。 クラスを作成せずに、状態やその他のReact機能を使用できます。",
  "components.Guideline.Introduction.buttonExampleNotFound": "無効なルートに移動します",
  "components.Guideline.Introduction.buttonExamples": "コード例",
  "components.Guideline.Introduction.buttonFilesDistribution": "ファイル配布",
  "components.Guideline.Introduction.buttonOpenModal": "オープンモーダル",
  "components.Guideline.Introduction.motivationContent": "フックは、5年間に渡って数万のコンポーネントを作成および保守してきた、Reactで発生した、一見切り離されているように見えるさまざまな問題を解決します。Reactを学習している場合でも、毎日使用している場合でも、 同様のコンポーネントモデルを持つ別のライブラリを好む場合でも、これらの問題のいくつかに気付くかもしれません。{br} {br}フックを使用すると、コンポーネントから状態ロジックを抽出して、個別にテストおよび再利用できます。フックを使用すると、次のことができます。 コンポーネントの階層を変更せずに状態ロジックを再利用します。これにより、多くのコンポーネント間で、またはコミュニティとフックを簡単に共有できます。」、",
  "components.Guideline.Introduction.subtitleMotivation": "モチベーション",
  "components.Guideline.Introduction.title": "フック",
  "components.Language.locale.displayName": "{locale,select,en{English}esmx{Español}es{Español}ja{日本語}other{Unknow}}",
  "components.Theme.SelectorTheme.tooltip": "{theme,select,light {闇} dark {光}}モードに変更",
  "views.Error404.button": "ホームページに移動",
  "views.Error404.description": "ページが存在しないか、コンテンツが利用できなくなりました",
  "views.Error404.title": "ページが見つかりません"
}
