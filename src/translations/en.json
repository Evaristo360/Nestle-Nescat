{
  "components.Guideline.CodeExamples.config01": "Config Provider - Use configuration in a component",
  "components.Guideline.CodeExamples.context01": "Declaration of application Language and Theme contexts",
  "components.Guideline.CodeExamples.mappers01": "Map the response of an api that returns an Object",
  "components.Guideline.CodeExamples.mappers02": "Map the response of an api that returns an Array",
  "components.Guideline.CodeExamples.messages01": "react-intl - Define messages using the defineMessages function",
  "components.Guideline.CodeExamples.messages02": "react-intl - Generate translations file automatically",
  "components.Guideline.CodeExamples.provider01": "Provider for the application theme",
  "components.Guideline.CodeExamples.provider02": "Provider for the application language",
  "components.Guideline.CodeExamples.provider03": "Use of the application providers in the Root component",
  "components.Guideline.CodeExamples.styles01": "Material UI - Create style classes with @material-ui/core/styles",
  "components.Guideline.CodeExamples.translations01": "react-intl - Render a text with the useIntl hook (We always recommend this option)",
  "components.Guideline.CodeExamples.translations02": "react-intl - Render a text with the FormattedMessage component",
  "components.Guideline.CodeExamples.translations03": "react-intl - Generate translations file automatically.",
  "components.Guideline.FileDistribution.api": "Contains the definitions for the backend services, in the \"request\" folder the endpoint definitions with their HTTP verbs should be included, and in the \"mappers\" folder An object must be included that serves to transform the response according to our mocks. {br} {br} If at any time there is a change in the structure of the response by Backend, this will be the only file that we will have to modify so that our component continues to function without major problem. ",
  "components.Guideline.FileDistribution.assets": "This folder includes static files that do not directly interfere with the operation of the application, for example: Images, Icons, Fonts, etc. {br} {br} It is mandatory that we import these resources using a main .js file, for more details you can check the Images.js file. ",
  "components.Guideline.FileDistribution.components": "The content of this folder is exclusive for the creation of the Application Components, the files of a component must be created in a folder that has the same name of the component, and in turn all the files that are part of the logic of the same must have the name of the component as a prefix, this will facilitate its location when looking for it in the VSCode. ",
  "components.Guideline.FileDistribution.config": "In our applications we use configuration through .env files which are loaded and compiled at runtime. {br} {br} It is 100% necessary that all configurations be processed in the config/provider.js, with this we will achieve that at a certain moment we can obtain configurations from various sources (for example an API) to apply hot changes without having to do a deploy. ",
  "components.Guideline.FileDistribution.context": "Jsx files with the suffix \"Context\" only contain the declaration of a React Context, which will be fed by a Provider and will mutate its value from anywhere in the application.",
  "components.Guideline.FileDistribution.hooks": "This folder contains hooks that can be used by any component of our application. With hooks, you can extract state logic from a component so that it can be tested and reused independently . {br} {br} Hooks allow you to reuse state logic without changing the hierarchy of your component. We often have to maintain components that start out simple but grow over time and become an unmanageable mess of multiple logics. status and side effects. ",
  "components.Guideline.FileDistribution.js": "The index.js files have as main objective to export all the elements that can be accessible from other directories, with this we avoid imports that point to each file and we achieve a cleaner and more accessible code using just the folder name. ",
  "components.Guideline.FileDistribution.jsx": "We must use the jsx extension to name all the files where we use React, this in order to differentiate the Components from a traditional .js.",
  "components.Guideline.FileDistribution.layouts": "The layouts are generic structures to distribute the views of the application, for example BaseLayout has a header and the content is rendered below it, on the other hand FullScreenLayout does not have a header, with this we managed to reuse the main structures of our Application without the need to duplicate code in all views. ",
  "components.Guideline.FileDistribution.mappers": "Mappers are used to transform the response of an API into a specific data structure based on a template according to our mocks. {br} The main advantage of using mappers is that changes in APIs do not directly affect our development. ",
  "components.Guideline.FileDistribution.messages": "The files with the suffix \"Messages\" have as main objective to define the component texts that will be translated using react-intl. The advantage of having them in these files helps us to be able to generate translations in multiple languages ​​automatically. ",
  "components.Guideline.FileDistribution.provider": "Jsx files with the suffix \"Provider\" contain the main Context Provider and are used to share the value of a Context with various application modules. {br} As a rule Mainly these wrappers receive a \"children\" in their props and are imported and used in the Root.jsx of the Application. ",
  "components.Guideline.FileDistribution.providers": "In this folder are those resources that will be used by the application in general, the idea is to centralize them to have openness in case at some point we can switch to extract them from another source. {br} {br} For now, we have support for general configuration, themes, and API resources. ",
  "components.Guideline.FileDistribution.scss": "SASS files can be used to create custom style sheets, it is only allowed to use SASS when the styles required by UX are very specific and we cannot create them using Material UI, we should always consider leaving them as a last option because we use Material UI to handle the themes and styles of the application. ",
  "components.Guideline.FileDistribution.sourceCodeLabel": "Source code",
  "components.Guideline.FileDistribution.src": "This folder contains the source code of the application.",
  "components.Guideline.FileDistribution.styles": "Files with suffix \"Styles\" are used to declare an object to style our components using Material UI. These files must export a single function called \"useStyles\".",
  "components.Guideline.FileDistribution.summary": "In this section you will find a brief guide on the distribution of architecture files. {br} You can interact with most of the elements of the file explorer shown below, in some files In addition to an explanation, you can find some code for reference. ",
  "components.Guideline.FileDistribution.theme": "Contains the global configuration of the Material UI theme, in this provider you can configure the color palettes, font size, breakpoints, among other points. Currently the application has support for variants theme DARK and LIGHT. ",
  "components.Guideline.FileDistribution.title": "Files",
  "components.Guideline.FileDistribution.translations": "Contains json files with the translations of all the texts used in the application and interpreted by react-intl. By default there is support for the languages ​​\"en\" and \"es mx\", but any required language can be added. {br} {br} It is mandatory that any text be rendered in components using react-intl, and the main language is \"es-mx\".",
  "components.Guideline.Introduction.aboutHooks": "Hooks are a new addition to React 16.8. They allow you to use state and other React features without writing a class.",
  "components.Guideline.Introduction.buttonExampleNotFound": "Navigate to an invalid route",
  "components.Guideline.Introduction.buttonExamples": "Code examples",
  "components.Guideline.Introduction.buttonFilesDistribution": "File distribution",
  "components.Guideline.Introduction.buttonOpenModal": "Open modal",
  "components.Guideline.Introduction.motivationContent": "Hooks solve a wide variety of seemingly disconnected problems in React that we've encountered over five years of writing and maintaining tens of thousands of components. Whether you're learning React, using it daily, or even prefer a different library with a similar component model, you may recognize some of these issues. {br}{br} With Hooks, you can extract state logic from a component so that it can be tested and reused independently. Hooks allow you to reuse state logic without changing the hierarchy of your component. This makes it easy to share Hooks between many components or even with the community.",
  "components.Guideline.Introduction.subtitleMotivation": "Motivation",
  "components.Guideline.Introduction.title": "Hooks",
  "components.Language.locale.displayName": "{locale,select,en{English}esmx{Español}es{Español}ja{日本語}other{Unknow}}",
  "components.Theme.SelectorTheme.tooltip": "Change to {theme,select,light{Dark}dark{Light}} mode",
  "views.Error404.button": "Go to homepage",
  "views.Error404.description": "The page does not exist or the content is no longer available",
  "views.Error404.title": "Page Not Found"
}
